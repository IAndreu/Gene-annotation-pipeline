import os
import sys
import pandas as pd
import re
import numpy as np
import argparse

# this script retrieves the gff, pep and cds of the genes/gene families of a genome that have been generated by the Gene-annotation-pipeline
parser = argparse.ArgumentParser(description='Script to generate the final outputs after running the re-annotation pipeline.')
parser.add_argument('pipeline_dir', type = str,
                     help = 'Main directory of the pipeline that contains the README.md.')
parser.add_argument('genome', type = str,
                     help = 'File with genomic sequences in FASTA format.')
parser.add_argument('gene_families_info', type = str,
                     help = 'Excel file containing all the gene families information.')
parser.add_argument('pipeline_output', type = str,
                     help = 'Directory with the output of the pipeline. ej: PATH/TO/GAGA-0001')
parser.add_argument('out_dir', type = str,
                     help = 'Output directory.')

args = parser.parse_args()
main_directory = args.pipeline_dir
Genome = args.genome # Genome fasta. ej "GAGA-0003_chromosome_gapCloser_nextpolish_final_dupsrm_filt.softMasked.fasta";
xlsx =  args.gene_families_info # Input excel of the pieline. ej."path/to/gene_families.xlsx"
genome_dir = args.pipeline_output # Path pipeline output for genome. ej. "path/to/GAGA-0003"  
genome_output = args.out_dir # place to store the output
# Get family names from 'gene_families.xlsx'
df = pd.read_excel(xlsx)
# Store Gene families:
gene_families= [df['Gene family'][i].replace(" ", "") for i in range(len(df))]
classification= [df['Function/Classification'][i].replace(" ", "") for i in range(len(df))]
trimmed= [str(df['Trimmed output'][i]) for i in range(len(df))]
get_from=[x.split('\t')[11] for x in open(genome_dir+"/table_results.txt").readlines()][1:]
os.system("mkdir -p %s" % (genome_output))
average_genes= {}
for i in range(len(df)):
    if '-' in str(df['Average number of genes'][i]):
        average_genes[gene_families[i]]=int(df['Average number of genes'][i].split('-')[0])+int(df['Average number of genes'][i].split('-')[1])/2
    else:
        average_genes[gene_families[i]]= int(df['Average number of genes'][i])
blast = {}
for i in range(len(df)):
    blast[gene_families[i]]=str(df['Blast'][i])

        
# Pick and copy the appropiate gff3 for each gene family to the output directory
for i in range(len(gene_families)):
    os.system("mkdir -p %s" % (genome_output+"/"+gene_families[i])) # folder with desired gff3 for each gene family
    if get_from[i] == "Step 1" and trimmed[i] == "Yes":
        os.system("cp %s %s" % (genome_dir+"/gene_families_pipeline/"+gene_families[i]+"/Step1/"+gene_families[i]+"_annot_genes_trimmed.gff3", genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline.gff3"))
    if get_from[i] == "Step 1" and trimmed[i] == "No":
        os.system("cp %s %s" % (genome_dir+"/gene_families_pipeline/"+gene_families[i]+"/Step1/"+gene_families[i]+"_annot_genes.gff3", genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline.gff3"))
    if get_from[i] == "Step 2" and trimmed[i] == "Yes":
        os.system("cp %s %s" % (genome_dir+"/gene_families_pipeline/"+gene_families[i]+"/Step2_bitacora/"+gene_families[i]+"/"+gene_families[i]+"_genomic_and_annotated_proteins_trimmed_idseqsclustered.gff3",genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline.gff3"))
    if get_from[i] == "Step 2" and trimmed[i] == "No":
        if str(os.path.isfile(genome_dir+"/gene_families_pipeline/"+gene_families[i]+"/Step2_bitacora/"+gene_families[i]+"/Intermediate_files/"+gene_families[i]+"_genomic_genes.gff3"))=='True':
            os.system("cat %s %s > %s" % (genome_dir+"/gene_families_pipeline/"+gene_families[i]+"/Step2_bitacora/"+gene_families[i]+"/Intermediate_files/"+gene_families[i]+"_annot_genes.gff3",genome_dir+"/gene_families_pipeline/"+gene_families[i]+"/Step2_bitacora/"+gene_families[i]+"/Intermediate_files/"+gene_families[i]+"_genomic_genes.gff3", genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline.gff3"))
        else:
            os.system("cat %s > %s" % (genome_dir+"/gene_families_pipeline/"+gene_families[i]+"/Step2_bitacora/"+gene_families[i]+"/Intermediate_files/"+gene_families[i]+"_annot_genes.gff3", genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline.gff3"))
    if get_from[i] == "Manual":
        os.system("cp %s %s" % (genome_dir+"/gene_families_pipeline/"+gene_families[i]+"/Manual/"+gene_families[i]+"_manualmodels.gff3", genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline.gff3"))

    # Rename the genes ID and mRNA parent names
    if str(os.path.isfile(genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline.gff3"))=='True':
        old_gff3 = open(genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline.gff3","r").readlines()
        new_gff3 = open(genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline.gff3","w")
        for line in old_gff3:
            if line in ['\n', '\r\n']:
                pass
            elif line.split("\t")[1]=='GenomicGFF':
                line = re.sub('\.t', '_i', line)
                new_gff3.write(line)
            else:
                if line.split("\t")[2]=="gene":
                    if re.findall(r'gene_(.*?)_i[0-9]{1,4}', line):
                        line = re.sub(r'(gene_).*(_i[0-9]{1,4})', re.findall(r'gene_(.*?)_i[0-9]{1,4}', line)[0], line)
                    elif re.findall(r'ID=(.*?)_i[0-9]{1,4}', line):
                        line = re.sub(r'(ID=).*(_i[0-9]{1,4})', "ID="+re.findall(r'ID=(.*?)_i[0-9]{1,4}', line)[0], line)
                    new_gff3.write(line)
                elif line.split("\t")[2]=="mRNA":
                    line = re.sub(r'(\tID=)', r'\g<1>%s' % (gene_families[i]+"_"), line)
                    if re.findall(r'gene_(.*?)_i[0-9]{1,4}', line):
                        line = re.sub(r'(gene_).*(_i[0-9]{1,4})', re.findall(r'gene_(.*?)_i[0-9]{1,4}', line)[0], line)
                    if "_split" not in line or trimmed[i] == "Yes":
                        new_gff3.write(line)
                    elif "_split1" in line:
                        line = line.replace("_split1","")
                        new_gff3.write(line)
                else: # CDS
                    line = re.sub(r'(\tID=)', r'\g<1>%s' % (gene_families[i]+"_"), line)
                    line = re.sub(r'(;Parent=)', r'\g<1>%s' % (gene_families[i]+"_"), line)
                    if "_split" not in line or trimmed[i] == "Yes":
                        new_gff3.write(line)
                    elif "_split1" in line:
                        line = line.replace("_split1","")
                        new_gff3.write(line)
        new_gff3.close()

genes_gf={}
# diccionary with all annotated genes with the gene families where they appear
for gene_family in os.listdir(genome_output):
    if str(os.path.isfile(genome_output+"/"+gene_family+"/"+gene_family+"_annotpipeline.gff3"))=='True':
        for line in open(genome_output+"/"+gene_family+"/"+gene_family+"_annotpipeline.gff3","r").readlines():
            if line.split("\t")[2]=="gene":
                if re.findall(r'\tID=(.*?);',line)[0] in genes_gf:
                    genes_gf[re.findall(r'\tID=(.*?);',line)[0]].append(gene_family)
                else:
                    genes_gf[re.findall(r'\tID=(.*?);',line)[0]]=[gene_family]       

sys.stdout.write(str(genes_gf))    
# Iterate over the diccionary genes, and delete the gene from the gff of the gene_families 
# that do not have blast (if the other does), if both have blast or both don't have then delete
# the gene family with higher expected average of genes (from the excel table)
for gene in genes_gf:
    genes_gf[gene]= list(set(genes_gf[gene]))
    if len(genes_gf[gene])>1 and genes_gf[gene][0] not in ["Lsd1","Lsd2"]:
        while len(genes_gf[gene])>1:
            if blast[genes_gf[gene][0]]=='Yes' and blast[genes_gf[gene][1]]!='Yes':
                my_file = genome_output+"/"+genes_gf[gene][1]+"/"+genes_gf[gene][1]+"_annotpipeline.gff3"
                tmpfile = genome_output+"/"+genes_gf[gene][1]+"/tmpfile"
                os.system("grep -v %s %s > %s" % (gene, my_file, tmpfile))
                os.system("rm %s" % (my_file))
                os.system("mv %s %s" % (tmpfile, my_file))
                genes_gf[gene].remove(genes_gf[gene][1])
            elif blast[genes_gf[gene][1]]=='Yes' and blast[genes_gf[gene][0]]!='Yes':
                my_file = genome_output+"/"+genes_gf[gene][0]+"/"+genes_gf[gene][0]+"_annotpipeline.gff3"
                tmpfile = genome_output+"/"+genes_gf[gene][1]+"/tmpfile"
                os.system("grep -v %s %s > %s" % (gene, my_file, tmpfile))
                os.system("rm %s" % (my_file))
                os.system("mv %s %s" % (tmpfile, my_file))
                genes_gf[gene].remove(genes_gf[gene][0])
            elif average_genes[genes_gf[gene][0]]>average_genes[genes_gf[gene][1]]:
                my_file = genome_output+"/"+genes_gf[gene][0]+"/"+genes_gf[gene][0]+"_annotpipeline.gff3"
                tmpfile = genome_output+"/"+genes_gf[gene][1]+"/tmpfile"
                os.system("grep -v %s %s > %s" % (gene, my_file, tmpfile))
                os.system("rm %s" % (my_file))
                os.system("mv %s %s" % (tmpfile, my_file))
                genes_gf[gene].remove(genes_gf[gene][0])
            else:
                my_file = genome_output+"/"+genes_gf[gene][1]+"/"+genes_gf[gene][1]+"_annotpipeline.gff3"
                tmpfile = genome_output+"/"+genes_gf[gene][1]+"/tmpfile"
                os.system("grep -v %s %s > %s" % (gene, my_file, tmpfile))
                os.system("rm %s" % (my_file))
                os.system("mv %s %s" % (tmpfile, my_file))
                genes_gf[gene].remove(genes_gf[gene][1])
    if len(genes_gf[gene])>1 and genes_gf[gene][0] in ["Lsd1","Lsd2"]:
        while len(genes_gf[gene])>1:
            my_file = genome_output+"/"+genes_gf[gene][0]+"/"+genes_gf[gene][0]+"_annotpipeline.gff3"
            os.system("sed -i 's/%s/%s/g' %s" % (gene, gene+"1", my_file) )
            genes_gf[gene].remove(genes_gf[gene][0])
# Produce fasta files
for i in range(len(gene_families)):
    if str(os.path.isfile(genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline.gff3"))=='True':
        os.system("perl "+main_directory+"/Scripts/gff2fasta_v3.pl %s %s %s" % (Genome, genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline.gff3", genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline"))
        os.system("sed -i 's/X$//g' %s" % (genome_output+"/"+gene_families[i]+"/"+gene_families[i]+"_annotpipeline.pep.fasta"))

